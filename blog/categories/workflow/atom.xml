<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Workflow | ALEX BABAN]]></title>
  <link href="http://www.alexbaban.com/blog/categories/workflow/atom.xml" rel="self"/>
  <link href="http://www.alexbaban.com/"/>
  <updated>2014-01-12T16:53:24-08:00</updated>
  <id>http://www.alexbaban.com/</id>
  <author>
    <name><![CDATA[Alex Baban]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up a New Computer for HTML5 WebWorks Apps Development]]></title>
    <link href="http://www.alexbaban.com/blog/2014/01/12/setting-up-a-new-computer-for-html5-webworks-apps-development/"/>
    <updated>2014-01-12T12:24:46-08:00</updated>
    <id>http://www.alexbaban.com/blog/2014/01/12/setting-up-a-new-computer-for-html5-webworks-apps-development</id>
    <content type="html"><![CDATA[<h3>Steps to follow when setting up a new computer for BlackBerry HTML5 WebWorks development.</h3>

<p><strong>Make a backup of the existing registered BlackBerry Code Signing Keys</strong>
<code>Files: author.p12, barsigner.csk, barsigner.db</code>
<code>Source (Windows 7): "C:\Users\&lt;username&gt;\AppData\Local\Research In Motion"</code></p>

<p><strong>Copy all three files (author.p12, barsigner.csk, barsigner.db) to the new computer</strong>
<code>Destination: "C:\Users\&lt;username&gt;\AppData\Local\Research In Motion"</code> (if needed create the &ldquo;Research In Motion&rdquo; folder)</p>

<p><strong>Download and install the Adobe AIR SDK &amp; Compiler</strong>
<code>Search Google for "download adobe air sdk"</code></p>

<p><strong>Download and instal the BlackBerry WebWorks SDK for PlayBook OS (tablet)</strong>
<code>http://developer.blackberry.com/playbook/html5/download/</code></p>

<p><strong>Verify and update %PATH% and %JAVA_HOME% Environment Variables</strong>
<code>"C:\&lt;BlackBerry WebWorks SDK install folder&gt;\jre\bin"</code> has to be added to <code>%PATH%</code> and it needs to replace any previous path that was pointing to a different java bin</p>

<p><code>%JAVA_HOME%</code> is not required but if it is set for other programs (e.g. maven) then it has to be set to point to <code>"C:\&lt;BlackBerry WebWorks SDK install folder&gt;\jre"</code></p>

<p><code>&lt;java&gt;&lt;/java&gt;</code> from <code>bbwp.properties</code> has to either be empty or contain <code>"C:\&lt;BlackBerry WebWorks SDK install folder&gt;\jre"</code></p>

<p><strong>Verify debug token</strong>
<code>"C:\&lt;BlackBerry WebWorks SDK install folder&gt;\bbwp\AirAppTemplates\src\blackberry-tablet.xml"</code> must contain proper <code>&lt;author&gt;</code> and <code>&lt;authorId&gt;</code> values</p>

<p>If packaging is done via command line then <code>&lt;debug_token&gt;&lt;/debug_token&gt;</code> from <code>bbwp.properties</code> has to contain a full path to a valid debug token</p>

<p><strong>Create a debug token</strong><br>At a command prompt, navigate to <code>"\blackberry-tablet-sdk\bin"</code> in the <code>&lt;BlackBerry WebWorks SDK install folder&gt;</code></p>

<p><code>blackberry-debugtokenrequest.bat -storepass &lt;KeystorePassword&gt; -devicepin &lt;device PIN&gt; &lt;debug_token_file_name.bar&gt;</code></p>

<p><strong>Install a debug token</strong><br>Configure the BlackBerry PlayBook tablet for development mode</p>

<p>At a command prompt, navigate to <code>"\blackberry-tablet-sdk\bin"</code> in the <code>&lt;BlackBerry WebWorks SDK install folder&gt;</code></p>

<p><code>blackberry-deploy -installDebugToken &lt;path to debug token&gt; -device &lt;Development Address&gt; -password &lt;device password&gt;</code></p>

<p><strong>Install the Chrome browser and the Ripple extension for Chrome</strong></p>

<p><strong>Create a &ldquo;Hello World!&rdquo; PlayBook HTML5 &amp; WebWorks app</strong></p>

<p>Folder: <code>"C:\Users\&lt;username&gt;\RippleSites\HelloWorld"</code> and files:</p>

<pre><code>\icon.png
\index.html
\config.xml
</code></pre>

<p>The home screen icon <code>icon.png</code> is in GitHub repo, source code for <code>index.html</code> and <code>config.xml</code>:</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html>
<head></p>

<pre><code>&lt;title&gt;HelloWorld&lt;/title&gt;
&lt;meta id="viewport" name="viewport" content="user-scalable=no, width=device-width" /&gt;
</code></pre>

<p></head></p>

<p><body></p>

<pre><code>&lt;div id="container"&gt;
    &lt;h1&gt;Hello World!&lt;/h1&gt;

&lt;/div&gt;
</code></pre>

<p></body>
</html></p>

<p>```</p>

<p>``` xml config.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?></p>

<p>&lt;widget xmlns=&ldquo;<a href="http://www.w3.org/ns/widgets">http://www.w3.org/ns/widgets</a>&rdquo;</p>

<pre><code>    xmlns:rim="http://www.blackberry.com/ns/widgets"
    version="1.0.0.0" id="HelloWorldApp"&gt;  
&lt;name&gt;Hello World&lt;/name&gt;
&lt;author&gt;My name&lt;/author&gt;
&lt;description&gt;Hello World app&lt;/description&gt;
&lt;icon src="icon.png"/&gt;
&lt;content src="index.html"/&gt;
</code></pre>

<p></widget></p>

<p>```</p>

<p><strong>Use command line or Ripple to package and deploy the app on a PlayBook tablet</strong></p>

<p>GitHub repo for this post <a href="https://github.com/alexbaban/devops/tree/master/HTML5%20WebWorks%20PlayBook%20%28seed%29/">link here</a></p>

<p>//+ &lt;3 by alexbaban</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securing a DigitalOcean Cloud Server]]></title>
    <link href="http://www.alexbaban.com/blog/2013/12/13/securing-a-digitalocean-cloud-server/"/>
    <updated>2013-12-13T11:54:19-08:00</updated>
    <id>http://www.alexbaban.com/blog/2013/12/13/securing-a-digitalocean-cloud-server</id>
    <content type="html"><![CDATA[<h3>I like DigitalOcean. It&rsquo;s one of my playgrounds. I spin up a virtual server, make a mess for a few hours then destroy it. The cost: $0.03 for about 4 hours of fun.</h3>

<p>But not all my virtual servers are short lived. Some, I need them up for a few days or weeks, some even longer. Here is what I do to secure a DigitalOcean virtual server.</p>

<p>Once the server is ready (it really takes about 60 seconds), I login using the &ldquo;Console Access&rdquo; VNC connection that&rsquo;s available on DigitalOcean&rsquo;s user account interface, then:</p>

<p>``` bash</p>

<h1>change root password</h1>

<p>passwd</p>

<h1>update all packages and operating system</h1>

<p>apt-get update &amp;&amp; apt-get &mdash;yes upgrade</p>

<h1>make a backup of sshd_config file, a read-only copy in /etc/ssh</h1>

<p>sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.factory-defaults
sudo chmod a-w /etc/ssh/sshd_config.factory-defaults</p>

<h1>edit the sshd_config file in the /etc/ssh directory</h1>

<p>nano /etc/ssh/sshd_config</p>

<h1>restrict ssh access by <my ip address>, add line</h1>

<p>AllowUsers root@<my ip address></p>

<h1>restart ssh</h1>

<p>sudo service ssh restart</p>

<p>```</p>

<p>At this point, I&rsquo;m good to start playing, I mean working. Any SSH access will be denied if the remote ip address doesn&rsquo;t match my ip address. I can also <code>cat /var/log/auth.log | more</code> to check the logs for any hacking attempts.</p>

<p>Sure, there are more techniques (SSH key pairs, configure iptables, use a non-standard port, limit users and groups, TCP wrappers, fail2ban and denyhosts) that can be combined to provide as much security as possible. The <code>sshd_config</code> technique explained above is quick.</p>

<p>Below I will describe how to configure iptables (built in firewall) rules to make ssh stealth. I use this when I expect to keep my virtual server up for more than just a few hours.</p>

<p>``` bash</p>

<h1>view all iptables rules (none for a new server)</h1>

<p>iptables &mdash;list</p>

<h1>view iptables rules by number and chain</h1>

<p>iptables -L INPUT &mdash;line-numbers</p>

<h1>restrict ssh access by ip address</h1>

<p>sudo iptables -A INPUT -p tcp &mdash;dport 22 -s <my ip address> -j ACCEPT
sudo iptables -A INPUT -p tcp &mdash;dport 22 -j REJECT</p>

<h1>also securing Jetty (when installed)</h1>

<p>sudo iptables -A INPUT -p tcp &mdash;dport 8080 -s 127.0.0.1 -j ACCEPT
sudo iptables -A INPUT -p tcp &mdash;dport 8080 -j REJECT</p>

<h1>make firewall rules persistent, save them to a file</h1>

<p>sudo sh -c &ldquo;iptables-save > /etc/iptables.rules&rdquo;</p>

<h1>make changes to /etc/network/interfaces</h1>

<p>sudo nano /etc/network/interfaces</p>

<h1>at the end of the primary network interface (eth0) config add:</h1>

<p>pre-up iptables-restore &lt; /etc/iptables.rules</p>

<p>```</p>

<p>The best way to secure the ssh daemon and other services is to apply more than one of these methods. Choosing the right ones means weighing security against convenience. Remember to play safe.</p>

<p>//+ &lt;3 by alexbaban</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using LiveReload and LiveReloadX on Windows - Free Solution]]></title>
    <link href="http://www.alexbaban.com/blog/2013/12/09/using-livereload-and-livereloadx-on-windows-free-solution/"/>
    <updated>2013-12-09T22:10:32-08:00</updated>
    <id>http://www.alexbaban.com/blog/2013/12/09/using-livereload-and-livereloadx-on-windows-free-solution</id>
    <content type="html"><![CDATA[<h3>Hitting refresh on your browser every time you change and save your code is &ldquo;so two years ago&rdquo;.</h3>

<p>I always like to research (personal websites, blogs, twitters) the speakers of recent front-end, back-end conferences and learn from these awesome people.</p>

<p>After watching some presentations made by some of the current <em>&ldquo;Ninja&rdquo;</em> or <em>&ldquo;Rockstar&rdquo;</em> developers (sorry <em>&ldquo;Gurus&rdquo;</em> but you&rsquo;re out of fashion) I wanted to setup live reload on my Windows development machine. I purchased the Compass.app for Windows and while it worked, my CPU usage went up by 30% when I was using it to monitor the file system for changes. I guess it did a lot of work in the background.</p>

<p>After more research I found &lsquo;LiveReloadX&rsquo;, a LiveReload compatible server based on Node.js. I can tell that it&rsquo;s working very well, it&rsquo;s light on CPU and you can customize what file types you&rsquo;d like to monitor for changes. LiveReloadX on GitHub <a href="https://github.com/nitoyon/livereloadx">link here</a>.</p>

<p>Here is the setup to get this working</p>

<ol>
<li><p>Install Node.js (if you don&rsquo;t have it already, which you should for other goodies)</p></li>
<li><p>Install LiveReloadX global <code>npm install livereloadx -g</code></p></li>
<li><p>Install the LiveReload browser extension <a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">link here</a></p></li>
<li><p>Open a command window and navigate into the folder you&rsquo;d like to monitor for changes. Sub-folders will also be monitored automatically. Run livereloadx in the command window and also click the LiveReload extension icon on the browser. Watch the messages between the server and the client in the command window.</p></li>
<li><p>For more information about LiveReloadX including help, usage and command options visit <a href="http://nitoyon.github.io/livereloadx/">link here</a></p></li>
</ol>


<p>Below is my screencast showing LiveReload, LiveReloadX on Windows.</p>

<pre>
<!-- copy and paste. Modify height and width if desired. -->
 <object id="scPlayer" width="745" height="600" type="application/x-shockwave-flash" data="http://content.screencast.com/users/alexbaban/folders/Default/media/167bebcf-8584-44ce-8d12-a6a54854b3b9/bootstrap.swf" >
 <param name="movie" value="http://content.screencast.com/users/alexbaban/folders/Default/media/167bebcf-8584-44ce-8d12-a6a54854b3b9/bootstrap.swf" />
 <param name="quality" value="high" />
 <param name="bgcolor" value="#FFFFFF" />
 <param name="flashVars" value="thumb=http://content.screencast.com/users/alexbaban/folders/Default/media/167bebcf-8584-44ce-8d12-a6a54854b3b9/FirstFrame.jpg&containerwidth=800&containerheight=600&content=http://content.screencast.com/users/alexbaban/folders/Default/media/167bebcf-8584-44ce-8d12-a6a54854b3b9/2013-12-09_1737.swf&blurover=false" />
 <param name="allowFullScreen" value="true" />
 <param name="scale" value="showall" />
 <param name="allowScriptAccess" value="always" />
 <param name="base" value="http://content.screencast.com/users/alexbaban/folders/Default/media/167bebcf-8584-44ce-8d12-a6a54854b3b9/" />
 Unable to display content. Adobe Flash is required.
</object> 
</pre>


<p>//+ &lt;3 by alexbaban</p>
]]></content>
  </entry>
  
</feed>
